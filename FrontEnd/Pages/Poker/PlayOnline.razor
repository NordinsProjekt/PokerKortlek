@page "/Poker/PokerOnline";
@using DataLayer.DTO
@using Classes;
@using GameEngine.Classes;
@using Microsoft.AspNetCore.SignalR.Client;
@inject NavigationManager Navigation
@inject PokerWrapper game;
@implements IAsyncDisposable

<PageTitle>Online Poker</PageTitle>
@if (connected == false)
{
    <div class="form-group">
        <label>
            RoomName:
            <input @bind="_roomName" />
        </label>
    </div>
    <button @onclick="ClickJoin">Join PokerGame</button>
}
@if (connected == true)
{
    <p>Connected to PokerRoom</p>
    //TODO
    //Render hand
    //Lägg till möjlighet att kasta kort och stanna.
    <h1>PokerGame</h1>
    <div class="highscore">
        <p><b>Score card:</b></p>
        <p>Player 1: @highScore[0]</p>
        <p>Player 2: @highScore[1]</p>
    </div>
    @foreach (var item in game.playerList)
    {
        <p>@item</p>
    }
    <h2>Your hand (Player (@playerId+1))</h2>

    @if (gameEnded == false)
    {
        @if (newGame)
        {
            <p>Click on the card to throw it</p>
            @foreach (var card in hand.ToList())
            {
                <a href="" @onclick="@(x=> ThrowCard(card.CardId))" @onclick:preventDefault><img class="pokercardimage" src="@GetFilePath(card.CardId)" /></a>
            }
            <br />
            <br />
            <button @onclick="GetNewCards">Draw to 5 cards</button>
        }
        else
        {
            <p>Waiting for another player</p>
        }
    }
    else
    {
        <p>Player (@game.WinningHand()+1)</p>
    }
}


@code {
    private HubConnection? hubConnection;
    private bool connected = false;
    public Hand<CardRecord> hand;
    public bool gameEnded = false;
    public bool newGame = false;
    private int playerId = 0;
    private string _roomName = "";
    public List<int> highScore = new List<int>()
    {
        0,0
    };

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/PokerRoom"))
            .Build();

        hubConnection.On("NewGame", () =>
        {
            newGame = true;
            hand = game.GetHand(playerId);
            StateHasChanged();
        });

        hubConnection.On<bool,int>("JoinRoom", async (con,number)=>{
            if (con)
            {
                this.connected = true;
                playerId = number;
                await hubConnection.SendAsync("DealCards");
                StateHasChanged();
            }
            else
            {
                Navigation.NavigateTo("/RoomFull");
            }
        });

        hubConnection.On<bool>("StartGame", (start) =>
        {
            newGame = true;
            hand = game.GetHand(playerId);
            game.Save();
            StateHasChanged();
        });

        hubConnection.On<List<CardRecord>>("DealCards", (list) =>
        {
            foreach (var card in list)
            {
                hand.Draw(card);
            }
            game.Update();
        });
        await hubConnection.StartAsync();
    }
    private async Task ClickJoin()
    {
        if (hubConnection == null)
            throw new Exception("HubConnection failed");
        playerId = game.JoinRoom(_roomName);
        if (playerId != -1)
        {
            connected = true;
            if (playerId == 1)
            {
                await hubConnection.InvokeAsync("StartGame");
            }
            
        }
        else
            Navigation.NavigateTo("/Poker/RoomFull");
        StateHasChanged();
    }

    private void GetNewCards()
    {
        int cardNeeded = 5 - hand.Count;
        for (int i = 0; i < cardNeeded; i++)
        {
            hand.Draw(game.GetDeck().Draw());
        }
        game.playerList[playerId].DrawnCards = true;
        var result = game.playerList.Where(x => x.DrawnCards == true).Count();
        if (result == 2)
        {
            gameEnded = true;
        }
        StateHasChanged();
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
            throw new Exception("Stupid hub Disposed");
        }
    }

    public string GetFilePath(int id)
    {
        return "/PokerGame/" + id + ".jpg";
    }

    public void ThrowCard(int id)
    {
        var card = hand.ToList().Where(x => x.CardId == id).First();
        for (int i = 0; i < hand.Count; i++)
        {
            if (card.Equals(hand[i]))
            {
                hand.Throw(i);
                break;
            }
        }
    }
}
