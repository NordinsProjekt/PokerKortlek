@page "/Javascript"
@inject IJSRuntime JS
@layout JavaScriptLayout

<h1>Javascript Index</h1>
<h2>Övning 1:3</h2>
<p></p>
<button class="btn-secondary" @onclick="WriteInsidePTag">Make Paragraph</button> <input @bind="inputText" /><br />

<h2>Övning 1:4</h2>
<div id="newHeading">@((MarkupString)heading14)</div>
<label>Tagname</label><input @bind="headingTag" /> <br />
<label>Text inside</label><input @bind="headingText" /><br />
<button class="btn-secondary" @onclick="WriteHeading">Make Tag</button>

<h2>Övning 2:1</h2>
<label>Skriv nummer med ett comma efter varandra</label>
<input @bind="arrString" /><br />
<button class="btn-secondary" @onclick="CalculateSum">Räkna ut summan</button>
<p>Summan är: @sum</p>
<br />

<h2>Övning 2:1</h2>
<label>Skriv startnummer , slutnummer (1,20)</label>
<input @bind="customArr" />
<br />
<button class="btn-secondary" @onclick="GenerateList">Skapa Lista</button>
<p>Här genereras listan: @((MarkupString)customList)</p>

@code {
    private string inputText = "";
    private string headingText = "";
    private string headingTag = "";
    private string heading14 = "";
    private string arrString = "";
    private string customArr = "";
    private int sum = 0;
    private string customList = "";
    private async Task WriteInsidePTag()
    {
        await JS.InvokeVoidAsync("make_paragraph", inputText);
    }

    private async Task WriteHeading()
    {
        object[] arr = new object[] { headingTag, headingText };
        heading14 = await JS.InvokeAsync<string>("make_heading", arr);
        StateHasChanged();
    }

    private async Task CalculateSum()
    {
        string[] temp = arrString.Split(",");
        int[] arr = new int[temp.Length];
        for (int i = 0; i < temp.Length; i++)
        {
            arr[i] = int.Parse(temp[i]);
        }
        sum = await JS.InvokeAsync<int>("CalculateSum", arr);
        StateHasChanged();
    }

    private async Task GenerateList()
    {
        string[] temp = customArr.Split(",");
        int start = int.Parse(temp[0]);
        int end = int.Parse(temp[1]);
        customList = await JS.InvokeAsync<string>("GenerateListOfNumbers", new object[]{start,end});
        StateHasChanged();
    }

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    await JS.InvokeVoidAsync("toggleSidebar");
    //}

    //OnAfterRenderAsync
}
